apiVersion: {{ include "common.capabilities.statefulset.apiVersion" . }}
kind: StatefulSet
metadata:
  name:  {{ include "flink.jobmanager.fullname" . }}
  namespace: {{ include "common.names.namespace" . | quote }}
  labels: {{- include "common.labels.standard" . | nindent 4 }}
    {{- if .Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
    app.kubernetes.io/part-of: flink
    app.kubernetes.io/component: jobmanager
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  selector:
    matchLabels: {{- include "common.labels.matchLabels" . | nindent 6 }}
  replicas: {{ .Values.jobmanager.replicaCount }}
  serviceName: {{ include "flink.headlessServiceName" . }}
  {{- if and .Values.jobmanager.updateStrategy (not .Values.highAvailability.enabled) }}
  strategy: {{- toYaml .Values.jobmanager.updateStrategy | nindent 4 }}
  {{- end }}
  template:
    metadata:
      labels: {{- include "common.labels.standard" . | nindent 8 }}
        app.kubernetes.io/part-of: flink
        app.kubernetes.io/component: jobmanager
        {{- if .Values.jobmanager.podLabels }}
        {{- include "common.tplvalues.render" (dict "value" .Values.jobmanager.podLabels "context" $) | nindent 8 }}
        {{- end }}
      {{- if .Values.jobmanager.podAnnotations }}
      annotations:
        service.alpha.kubernetes.io/tolerate-endpoint-disruptive-updates: "true"
        {{- if .Values.jobmanager.podAnnotations }}
        {{- include "common.tplvalues.render" (dict "value" .Values.jobmanager.podAnnotations "context" $) | nindent 8 }}
        {{- end }}
      {{- end }}
    spec:
      dnsConfig:
        searches:
          - jobmanager-x.default.svc.cluster.local
      {{- if .Values.jobmanager.schedulerName }}
      schedulerName: {{ .Values.jobmanager.schedulerName }}
      {{- end }}
      priorityClassName: {{ .Values.jobmanager.priorityClassName | quote }}
      {{- if .Values.jobmanager.affinity }}
      affinity: {{- include "common.tplvalues.render" (dict "value" .Values.jobmanager.affinity "context" $) | nindent 8 }}
      {{- else }}
      affinity:
        podAffinity: {{- include "common.affinities.pods" (dict "type" .Values.jobmanager.podAffinityPreset "component" "jobmanager" "context" $) | nindent 10 }}
        podAntiAffinity: {{- include "common.affinities.pods" (dict "type" .Values.jobmanager.podAntiAffinityPreset "component" "jobmanager" "context" $) | nindent 10 }}
        nodeAffinity: {{- include "common.affinities.nodes" (dict "type" .Values.jobmanager.nodeAffinityPreset.type "key" .Values.jobmanager.nodeAffinityPreset.key "values" .Values.jobmanager.nodeAffinityPreset.values) | nindent 10 }}
      {{- end }}
      {{- if .Values.jobmanager.podSecurityContext.enabled }}
      securityContext: {{- omit .Values.jobmanager.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      {{- if .Values.jobmanager.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" (dict "value" .Values.jobmanager.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.jobmanager.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.jobmanager.tolerations "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.jobmanager.topologySpreadConstraints }}
      topologySpreadConstraints: {{- include "common.tplvalues.render" (dict "value" .Values.jobmanager.topologySpreadConstraints "context" $) | nindent 8 }}
      {{- end }}
      initContainers:
        - name: {{ printf "%s-install-libs-initcontainer" (include "common.names.fullname" .) }}
          image: {{ include "flink.libsJob.image" . }}
          imagePullPolicy: {{ .Values.libs.image.pullPolicy  }}
          command: [ "sh",
                     "-e",
                     "/tmp/scripts/install_libs.sh" ]
          resources: {{- toYaml .Values.libs.resources | nindent 12 }}
          securityContext: {{- .Values.libs.containerSecurityContext | toYaml | nindent 12 }}
          volumeMounts:
            - name: install-libs
              mountPath: /tmp/scripts/
            - name: provisioning
              mountPath: /bitnami/flink-provisioning
          {{- if .Values.libs.resources }}
          resources: {{- toYaml .Values.libs.resources | nindent 12 }}
          {{- end }}
      {{- if .Values.jobmanager.initContainers }}
      {{- include "common.tplvalues.render" (dict "value" .Values.jobmanager.initContainers "context" $) | nindent 8 }}
      {{- end }}
      containers:
        - name: {{ include "flink.jobmanager.fullname" . }}
          image: {{ include "flink.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
          {{- if .Values.jobmanager.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.jobmanager.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          {{- if .Values.diagnosticMode.enabled }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.command "context" $) | nindent 12 }}
          {{- else if .Values.jobmanager.command }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.jobmanager.command "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.diagnosticMode.enabled }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.args "context" $) | nindent 12 }}
          {{- else if .Values.jobmanager.args }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.jobmanager.args "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.jobmanager.lifecycleHooks }}
          lifecycle: {{- include "common.tplvalues.render" (dict "value" .Values.jobmanager.lifecycleHooks "context" $) | nindent 12 }}
          {{- end }}
          ports:
            - name: rpc
              containerPort: {{ .Values.jobmanager.containerPorts.rpc }}
            - name: web
              containerPort: {{ .Values.jobmanager.containerPorts.web }}
            - name: blob
              containerPort: {{ .Values.jobmanager.containerPorts.blob }}
          env:
            - name: FLINK_MODE
              value: jobmanager
            - name: FLINK_CFG_JOBMANAGER_BIND__HOST
              value: 0.0.0.0
            - name: POD_NAME
              {{- if .Values.highAvailability.enabled}}
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
              {{- else }}
              value: flink-jobmanager
              {{- end}}
            - name: HADOOP_CLASSPATH
              value: /opt/bitnami/flink/plugins/s3/flink-s3-fs-hadoop-1.16.0.jar
            - name: FLINK_CFG_JOBMANAGER_RPC_ADDRESS
              value: {{ printf "$(POD_NAME).%s" (include "flink.headlessServiceName" .) }}
            {{- if .Values.highAvailability.enabled}}
            - name: FLINK_CFG_HIGH__AVAILABILITY_TYPE
              value: zookeeper
            - name: FLINK_CFG_HIGH__AVAILABILITY_ZOOKEEPER_QUORUM
              value: {{ include "flink.zookeeper.fullAddress" . }}
            - name: FLINK_CFG_HIGH__AVAILABILITY_PATH_ROOT
              value: {{.Values.highAvailability.pathRoot}}
            - name: FLINK_CFG_HIGH__AVAILABILITY_CLUSTER__ID
              value: {{.Values.highAvailability.clusterId}}
            - name: FLINK_CFG_HIGH__AVAILABILITY_STORAGE_DIR
              value: {{ include "flink.minio.uri" . }}
            - name: ENABLE_BUILT_IN_PLUGINS
              value: flink-s3-fs-hadoop-1.16.0.jar;hadoop-mapreduce-client-core-3.3.4.jar
            {{- end}}
            - name: BITNAMI_DEBUG
              value: {{ ternary "true" "false" .Values.image.debug | quote }}
            {{- if .Values.jobmanager.extraEnvVars }}
              {{- include "common.tplvalues.render" (dict "value" .Values.jobmanager.extraEnvVars "context" $) | nindent 12 }}
            {{- end }}
          envFrom:
            {{- if .Values.jobmanager.extraEnvVarsCM }}
            - configMapRef:
                name: {{ .Values.jobmanager.extraEnvVarsCM }}
            {{- end }}
            {{- if .Values.jobmanager.extraEnvVarsSecret }}
            - secretRef:
                name: {{ .Values.jobmanager.extraEnvVarsSecret }}
            {{- end }}
          {{- if not .Values.diagnosticMode.enabled }}
          {{- if .Values.jobmanager.customStartupProbe }}
          startupProbe: {{- include "common.tplvalues.render" (dict "value" .Values.jobmanager.customStartupProbe "context" $) | nindent 12 }}
          {{- else if .Values.jobmanager.startupProbe.enabled }}
          startupProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.jobmanager.startupProbe "enabled") "context" $) | nindent 12 }}
            httpGet:
              path: /
              port: admin
          {{- end }}
          {{- if .Values.jobmanager.customLivenessProbe }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.jobmanager.customLivenessProbe "context" $) | nindent 12 }}
          {{- else if .Values.jobmanager.livenessProbe.enabled }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.jobmanager.livenessProbe "enabled") "context" $) | nindent 12 }}
            httpGet:
              path: /
              port: admin
          {{- end }}
          {{- if .Values.jobmanager.customReadinessProbe }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.jobmanager.customReadinessProbe "context" $) | nindent 12 }}
          {{- else if .Values.jobmanager.readinessProbe.enabled }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.jobmanager.readinessProbe "enabled") "context" $) | nindent 12 }}
            httpGet:
              path: /
              port: admin
          {{- end }}
          {{- end }}
          {{- if .Values.jobmanager.resources }}
          resources: {{- toYaml .Values.jobmanager.resources | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: provisioning
              mountPath: /bitnami/flink-provisioning
          {{- if .Values.jobmanager.extraVolumeMounts }}
            {{- include "common.tplvalues.render" ( dict "value" .Values.jobmanager.extraVolumeMounts "context" $) | nindent 12 }}
          {{- end }}
        {{- if .Values.jobmanager.sidecars }}
        {{- include "common.tplvalues.render" ( dict "value" .Values.jobmanager.sidecars "context" $) | nindent 8 }}
        {{- end }}
      volumes:
       {{- if .Values.libs.install }}
        - name: install-libs
          configMap:
            name: {{ printf "%s-install-libs-configmap" (include "common.names.fullname" .) }}
            items:
              - key: install_libs.sh
                path: install_libs.sh
        - name: provisioning
          emptyDir: {}
        {{- end }}
        {{- if .Values.jobmanager.extraVolumes }}
        {{- include "common.tplvalues.render" ( dict "value" .Values.jobmanager.extraVolumes "context" $) | nindent 8 }}
        {{- end }}
